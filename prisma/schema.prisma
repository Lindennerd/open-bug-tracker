// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    Project          Project[]
    ProjectMember    ProjectMember[]
    bugs             Bug[]
    BugComment       BugComment[]
    Reaction         BugReaction[]
    CommentReactions CommentReaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    repo        String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User            @relation(fields: [createdById], references: [id])
    createdById String
    members     ProjectMember[]
    bugs        Bug[]

    @@index([name])
}

model ProjectMember {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    project   Project @relation(fields: [projectId], references: [id])
    projectId Int

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([projectId])
    @@index([userId])
}

model Bug {
    id        Int      @id @default(autoincrement())
    project   Project  @relation(fields: [projectId], references: [id])
    projectId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    body      String

    createdBy   User         @relation(fields: [createdById], references: [id])
    createdById String
    BugComment  BugComment[]

    status    BugStatus     @default(OPEN)
    reactions BugReaction[]
}

model BugComment {
    id        Int      @id @default(autoincrement())
    bug       Bug      @relation(fields: [bugId], references: [id])
    bugId     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    body      String

    createdBy        User              @relation(fields: [createdById], references: [id])
    createdById      String
    CommentReactions CommentReaction[]
}

enum BugStatus {
    OPEN
    STALE
    IN_PROGRESS
    CLOSED
}

enum Reactions {
    LIKE
    LOVE
    HAHA
    WOW
    SAD
    ANGRY
}

model BugReaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    bug   Bug @relation(fields: [bugId], references: [id])
    bugId Int

    reaction Reactions
}

model CommentReaction {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    bugComment   BugComment @relation(fields: [bugCommentId], references: [id])
    bugCommentId Int

    reaction Reactions
}
